
mysql --local-infile=1 -u root -p9417 new_schema 

db.init_app(app)
def get_tables():
    engine = db.get_engine()
    print("*****************************************")
    with engine.connect() as conn:
        # 注意：这里直接使用原生 SQL 字符串
        result = conn.execute("SHOW TABLES")
        tables = [row[0] for row in result]
    return tables


@app.route('/show_tables')
def show_tables():
    tables = get_tables()
    return render_template('tables.html', tables=tables)
    
if __name__ == '__main__':
    create_tables()
    app.run(debug=True





select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '2016-07-01'
	and o_orderdate < date '2016-07-01' + interval '3' month

	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;


@app.route('/discount_salary')
def discount_salary():
    engine = db.get_engine()
    with engine.connect() as conn:
        sql_query = text("""
            select
                sum(l_extendedprice* (1 - l_discount)) as revenue
            from
               ...

        """)
        start_time = time.time()
        result = conn.execute(sql_query).fetchall()
        end_time = time.time()
        execution_time=end_time-start_time
        
    return render_template('discount_salary.html', results=result,execution_time=execution_time)


    @app.route('/order_priority',methods=['GET', 'POST'])
def order_priority():
    o_orderdate = request.values.get('o_orderdate')  
    if not o_orderdate:
        o_orderdate = '2016-07-01'
    engine = db.get_engine()
    with engine.connect() as conn:
        # 使用 text() 封装 SQL 字符串
        sql_query = text("""
            SELECT
                o_orderpriority,
                count(*) as order_count
            FROM
                orders
            WHERE
                o_orderdate >= :o_orderdate
                AND o_orderdate < date ':o_orderdate' + interval '3' month
                ....
        """)
        start_time = time.time()
        result = conn.execute(sql_query,{'o_orderdate': o_orderdate,'o_orderdate': o_orderdate}).fetchall()
        end_time = time.time()
        execution_time=end_time-start_time
        
    return render_template('order_priority.html', results=result,execution_time=execution_time)





    sql_query = text("""
            LOAD DATA LOCAL INFILE 'C:/Users/27577/Desktop/tools/教材/大三下/数据库/数据库系统原理课程设计-2-TPC电商数据管理系统/TPC-H/dbgen/region.tbl'
            INTO TABLE REGION
            FIELDS TERMINATED BY '|' 
            LINES TERMINATED BY '\n'
            (R_REGIONKEY, R_NAME,R_COMMENT);
        """)


        C:/Users/27577/Documents/AllCode/db/region_split路径下有seg_num个文件，分别是1.tbl ,2.tbl...seg_num.tbl
        要使用以下代码将他们都导入数据库怎么做
        sql_query = text("""
            LOAD DATA LOCAL INFILE ''
            INTO TABLE REGION
            FIELDS TERMINATED BY '|' 
            LINES TERMINATED BY '\n'
            (R_REGIONKEY, R_NAME,R_COMMENT);
        """)
        conn.execute(sql_query)


folder_path = 'C:/Users/27577/Documents/AllCode/db/region_split'

for i in range(1, seg_num + 1):
    file_path = os.path.join(folder_path, f'{i}.tbl')
    
    # 构建SQL查询，动态插入文件路径
    sql_query = text(f"""
        LOAD DATA LOCAL INFILE '{file_path}'
        INTO TABLE REGION
        FIELDS TERMINATED BY '|' 
        LINES TERMINATED BY '\n'
        (R_REGIONKEY, R_NAME, R_COMMENT);
    """)
    
    # 执行SQL查询导入数据
    with engine.connect() as conn:
        conn.execute(sql_query)

print("所有文件导入完成")




import datetime
import os
def validate_order(line):
    try:
        fields = line.strip().split('|')
        if len(fields) != 9:  
            return False
        
        
        o_orderkey = int(fields[0])
        o_custkey = int(fields[1])
        o_orderstatus = fields[2]
        o_totalprice = float(fields[3])
        o_orderdate = datetime.datetime.strptime(fields[4], '%Y-%m-%d').date()
        o_orderpriority = fields[5]
        o_clerk = fields[6]
        o_shippriority = int(fields[7])
        o_comment = fields[8]
        
        
        if not o_orderstatus in ['F', 'O', 'P']:  
            return False        
        return True
    except ValueError:  
        return False
    except IndexError:  
        return False

def clear_data(input_path, output_path, error_log_path):
    with open(input_path, 'w') as infile, \
         open(output_path, 'w') as outfile, \
         open(error_log_path, 'w') as errorfile:
        
        line_number = 1
        for line in infile:
            if validate_order(line):
                outfile.write(line)
            else:
                errorfile.write(f'{line_number}\n')
            line_number += 1


path0='C:/Users/27577/Desktop/tools/教材/大三下/数据库/数据库系统原理课程设计-2-TPC电商数据管理系统/TPC-H/dbgen/'
path_orders=os.path.join(path0,'orders.tbl')
path_clean='C:/Users/27577/Desktop/tools/教材/大三下/数据库/数据库系统原理课程设计-2-TPC电商数据管理系统/TPC-H/clean_data/'

clear_data(path_orders, path_clean, path_clean)
